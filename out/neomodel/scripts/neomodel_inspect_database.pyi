from _typeshed import Incomplete
from neomodel.sync_.database import db as db

IMPORTS: Incomplete

def parse_prop_class(prop_type): ...

class NodeInspector:
    @staticmethod
    def get_properties_for_label(label): ...
    @staticmethod
    def get_constraints_for_label(label): ...
    @staticmethod
    def get_indexed_properties_for_label(label): ...

class RelationshipInspector:
    @classmethod
    def outgoing_relationships(cls, start_label, get_properties: bool = True): ...
    @staticmethod
    def get_constraints_for_type(rel_type): ...
    @staticmethod
    def get_indexed_properties_for_type(rel_type): ...
    @staticmethod
    def infer_cardinality(rel_type, start_label): ...

def get_node_labels(): ...
def build_prop_string(unique_properties, indexed_properties, prop, prop_type): ...
def clean_class_member_key(key): ...
def generate_rel_class_name(rel_type): ...
def parse_imports(): ...
def build_rel_type_definition(label, outgoing_relationships, defined_rel_types, infer_cardinality: bool = True): ...
def inspect_database(bolt_url, get_relationship_properties: bool = True, infer_relationship_cardinality: bool = True): ...
def main() -> None: ...
