from _typeshed import Incomplete

class QBase:
    default: str
    children: Incomplete
    connector: Incomplete
    negated: Incomplete
    def __init__(self, children=None, connector=None, negated: bool = False) -> None: ...
    def __deepcopy__(self, memodict): ...
    def __len__(self) -> int: ...
    def __bool__(self) -> bool: ...
    def __contains__(self, other) -> bool: ...
    def __eq__(self, other): ...
    def __hash__(self): ...
    def add(self, data, conn_type, squash: bool = True): ...
    def negate(self) -> None: ...

class Q(QBase):
    AND: str
    OR: str
    default = AND
    def __init__(self, *args, **kwargs) -> None: ...
    def __or__(self, other): ...
    def __and__(self, other): ...
    def __invert__(self): ...
