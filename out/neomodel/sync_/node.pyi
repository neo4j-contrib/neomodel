from _typeshed import Incomplete
from neo4j.graph import Node as Node
from neomodel.constants import STREAMING_WARNING as STREAMING_WARNING
from neomodel.exceptions import DoesNotExist as DoesNotExist, NodeClassAlreadyDefined as NodeClassAlreadyDefined
from neomodel.hooks import hooks as hooks
from neomodel.properties import Property as Property
from neomodel.sync_.database import db as db
from neomodel.sync_.match import NodeSet as NodeSet
from neomodel.sync_.property_manager import PropertyManager as PropertyManager
from neomodel.util import classproperty as classproperty
from typing import Any, Callable

class NodeMeta(type):
    DoesNotExist: type[DoesNotExist]
    __required_properties__: tuple[str, ...]
    __all_properties__: tuple[tuple[str, Any], ...]
    __all_aliases__: tuple[tuple[str, Any], ...]
    __all_relationships__: tuple[tuple[str, Any], ...]
    __label__: str
    __optional_labels__: list[str]
    defined_properties: Callable[..., dict[str, Any]]
    def __new__(mcs: type, name: str, bases: tuple[type, ...], namespace: dict[str, Any]) -> Any: ...

def build_class_registry(cls) -> None: ...

NodeBase: type

class StructuredNode(NodeBase):
    __abstract_node__: bool
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def __eq__(self, other: Any) -> bool: ...
    def __ne__(self, other: Any) -> bool: ...
    @classproperty
    def nodes(self) -> NodeSet: ...
    @property
    def element_id(self) -> Any | None: ...
    @property
    def id(self) -> int: ...
    @property
    def was_saved(self) -> bool: ...
    @classmethod
    def create(cls, *props: tuple, **kwargs: dict[str, Any]) -> list: ...
    @classmethod
    def create_or_update(cls, *props: tuple, **kwargs: dict[str, Any]) -> list: ...
    def cypher(self, query: str, params: dict[str, Any] | None = None) -> tuple[list | None, tuple[str, ...] | None]: ...
    deleted: bool
    @hooks
    def delete(self) -> bool: ...
    @classmethod
    def get_or_create(cls, *props: tuple, **kwargs: dict[str, Any]) -> list: ...
    @classmethod
    def inflate(cls, graph_entity: Node) -> Any: ...
    @classmethod
    def inherited_labels(cls) -> list[str]: ...
    @classmethod
    def inherited_optional_labels(cls) -> list[str]: ...
    def labels(self) -> list[str]: ...
    def refresh(self) -> None: ...
    element_id_property: Incomplete
    @hooks
    def save(self) -> StructuredNode: ...
