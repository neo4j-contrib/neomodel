from neo4j.graph import Node as Node, Relationship as Relationship
from neomodel.exceptions import RequiredProperty as RequiredProperty
from neomodel.properties import AliasProperty as AliasProperty, Property as Property
from typing import Any

def display_for(key: str) -> Any: ...

class PropertyManager:
    def __init__(self, **kwargs: dict[str, Any]) -> None: ...
    @property
    def __properties__(self) -> dict[str, Any]: ...
    @classmethod
    def deflate(cls, properties: Any, obj: Any = None, skip_empty: bool = False) -> dict[str, Any]: ...
    @classmethod
    def inflate(cls, graph_entity: Node | Relationship) -> Any: ...
    @classmethod
    def defined_properties(cls, aliases: bool = True, properties: bool = True, rels: bool = True) -> dict[str, Any]: ...
