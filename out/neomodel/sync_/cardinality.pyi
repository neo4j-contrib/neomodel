from neomodel import StructuredNode as StructuredNode, StructuredRel as StructuredRel
from neomodel.config import get_config as get_config
from neomodel.exceptions import AttemptedCardinalityViolation as AttemptedCardinalityViolation, CardinalityViolation as CardinalityViolation
from neomodel.sync_.relationship_manager import RelationshipManager as RelationshipManager, ZeroOrMore as ZeroOrMore
from typing import Any

class ZeroOrOne(RelationshipManager):
    description: str
    def check_cardinality(self, node: StructuredNode) -> None: ...
    def single(self) -> StructuredNode | None: ...
    def all(self) -> list['StructuredNode']: ...
    def connect(self, node: StructuredNode, properties: dict[str, Any] | None = None) -> StructuredRel: ...

class OneOrMore(RelationshipManager):
    description: str
    def single(self) -> StructuredNode: ...
    def all(self) -> list['StructuredNode']: ...
    def disconnect(self, node: StructuredNode) -> None: ...
    def disconnect_all(self) -> None: ...

class One(RelationshipManager):
    description: str
    def check_cardinality(self, node: StructuredNode) -> None: ...
    def single(self) -> StructuredNode: ...
    def all(self) -> list['StructuredNode']: ...
    def disconnect(self, node: StructuredNode) -> None: ...
    def disconnect_all(self) -> None: ...
    def connect(self, node: StructuredNode, properties: dict[str, Any] | None = None) -> StructuredRel: ...
