import neo4j
from dataclasses import dataclass, field
from neo4j import Driver as Driver
from neomodel._version import __version__ as __version__
from typing import Any

@dataclass
class NeomodelConfig:
    database_url: str = field(default='bolt://neo4j:foobarbaz@localhost:7687', metadata={'env_var': 'NEOMODEL_DATABASE_URL', 'description': 'Graph database connection URL'})
    driver: Driver | None = field(default=None, metadata={'env_var': None, 'description': 'Custom database driver instance'})
    database_name: str | None = field(default=None, metadata={'env_var': 'NEOMODEL_DATABASE_NAME', 'description': 'Database name for neomodel-managed driver instance'})
    connection_acquisition_timeout: float = field(default=60.0, metadata={'env_var': 'NEOMODEL_CONNECTION_ACQUISITION_TIMEOUT', 'description': 'Connection acquisition timeout in seconds'})
    connection_timeout: float = field(default=30.0, metadata={'env_var': 'NEOMODEL_CONNECTION_TIMEOUT', 'description': 'Connection timeout in seconds'})
    encrypted: bool = field(default=False, metadata={'env_var': 'NEOMODEL_ENCRYPTED', 'description': 'Enable encrypted connections'})
    keep_alive: bool = field(default=True, metadata={'env_var': 'NEOMODEL_KEEP_ALIVE', 'description': 'Enable keep-alive connections'})
    max_connection_lifetime: int = field(default=3600, metadata={'env_var': 'NEOMODEL_MAX_CONNECTION_LIFETIME', 'description': 'Maximum connection lifetime in seconds'})
    max_connection_pool_size: int = field(default=100, metadata={'env_var': 'NEOMODEL_MAX_CONNECTION_POOL_SIZE', 'description': 'Maximum connection pool size'})
    max_transaction_retry_time: float = field(default=30.0, metadata={'env_var': 'NEOMODEL_MAX_TRANSACTION_RETRY_TIME', 'description': 'Maximum transaction retry time in seconds'})
    resolver: Any | None = field(default=None, metadata={'env_var': None, 'description': 'Custom resolver for connection routing'})
    trusted_certificates: Any = field(default_factory=neo4j.TrustSystemCAs, metadata={'env_var': None, 'description': 'Trusted certificates for encrypted connections'})
    user_agent: str = field(default=<ERROR>.join(['neomodel/v', <ERROR>.format(__version__, '')]), metadata={'env_var': 'NEOMODEL_USER_AGENT', 'description': 'User agent string for connections'})
    force_timezone: bool = field(default=False, metadata={'env_var': 'NEOMODEL_FORCE_TIMEZONE', 'description': 'Force timezone-aware datetime objects'})
    soft_cardinality_check: bool = field(default=False, metadata={'env_var': 'NEOMODEL_SOFT_CARDINALITY_CHECK', 'description': 'Enable soft cardinality checking (warnings only)'})
    cypher_debug: bool = field(default=False, metadata={'env_var': 'NEOMODEL_CYPHER_DEBUG', 'description': 'Enable Cypher debug logging'})
    slow_queries: float = field(default=0.0, metadata={'env_var': 'NEOMODEL_SLOW_QUERIES', 'description': 'Threshold in seconds for slow query logging (0 = disabled)'})
    def __post_init__(self) -> None: ...
    def __setattr__(self, name: str, value: Any) -> None: ...
    @classmethod
    def from_env(cls) -> NeomodelConfig: ...
    def to_dict(self) -> dict[str, Any]: ...
    def update(self, **kwargs) -> None: ...

def get_config() -> NeomodelConfig: ...
def set_config(config: NeomodelConfig) -> None: ...
def reset_config() -> None: ...
def clear_deprecation_warnings() -> None: ...

class _ConfigModule:
    @property
    def DATABASE_URL(self) -> str: ...
    @DATABASE_URL.setter
    def DATABASE_URL(self, value: str) -> None: ...
    @property
    def DRIVER(self) -> Driver | None: ...
    @DRIVER.setter
    def DRIVER(self, value: Driver | None) -> None: ...
    @property
    def DATABASE_NAME(self) -> str | None: ...
    @DATABASE_NAME.setter
    def DATABASE_NAME(self, value: str | None) -> None: ...
    @property
    def CONNECTION_ACQUISITION_TIMEOUT(self) -> float: ...
    @CONNECTION_ACQUISITION_TIMEOUT.setter
    def CONNECTION_ACQUISITION_TIMEOUT(self, value: float) -> None: ...
    @property
    def CONNECTION_TIMEOUT(self) -> float: ...
    @CONNECTION_TIMEOUT.setter
    def CONNECTION_TIMEOUT(self, value: float) -> None: ...
    @property
    def ENCRYPTED(self) -> bool: ...
    @ENCRYPTED.setter
    def ENCRYPTED(self, value: bool) -> None: ...
    @property
    def KEEP_ALIVE(self) -> bool: ...
    @KEEP_ALIVE.setter
    def KEEP_ALIVE(self, value: bool) -> None: ...
    @property
    def MAX_CONNECTION_LIFETIME(self) -> int: ...
    @MAX_CONNECTION_LIFETIME.setter
    def MAX_CONNECTION_LIFETIME(self, value: int) -> None: ...
    @property
    def MAX_CONNECTION_POOL_SIZE(self) -> int: ...
    @MAX_CONNECTION_POOL_SIZE.setter
    def MAX_CONNECTION_POOL_SIZE(self, value: int) -> None: ...
    @property
    def MAX_TRANSACTION_RETRY_TIME(self) -> float: ...
    @MAX_TRANSACTION_RETRY_TIME.setter
    def MAX_TRANSACTION_RETRY_TIME(self, value: float) -> None: ...
    @property
    def RESOLVER(self) -> Any | None: ...
    @RESOLVER.setter
    def RESOLVER(self, value: Any | None) -> None: ...
    @property
    def TRUSTED_CERTIFICATES(self) -> Any: ...
    @TRUSTED_CERTIFICATES.setter
    def TRUSTED_CERTIFICATES(self, value: Any) -> None: ...
    @property
    def USER_AGENT(self) -> str: ...
    @USER_AGENT.setter
    def USER_AGENT(self, value: str) -> None: ...
    @property
    def FORCE_TIMEZONE(self) -> bool: ...
    @FORCE_TIMEZONE.setter
    def FORCE_TIMEZONE(self, value: bool) -> None: ...
    @property
    def SOFT_CARDINALITY_CHECK(self) -> bool: ...
    @SOFT_CARDINALITY_CHECK.setter
    def SOFT_CARDINALITY_CHECK(self, value: bool) -> None: ...
    @property
    def CYPHER_DEBUG(self) -> bool: ...
    @CYPHER_DEBUG.setter
    def CYPHER_DEBUG(self, value: bool) -> None: ...
    @property
    def SLOW_QUERIES(self) -> float: ...
    @SLOW_QUERIES.setter
    def SLOW_QUERIES(self, value: float) -> None: ...
