from _typeshed import Incomplete
from neo4j.api import Bookmarks as Bookmarks
from neomodel._async_compat.util import AsyncUtil as AsyncUtil
from neomodel.async_.database import AsyncDatabase as AsyncDatabase
from neomodel.constants import NOT_COROUTINE_ERROR as NOT_COROUTINE_ERROR
from neomodel.exceptions import UniqueProperty as UniqueProperty
from typing import Any, Callable

class AsyncTransactionProxy:
    db: AsyncDatabase
    access_mode: str | None
    parallel_runtime: bool | None
    bookmarks: Bookmarks | None
    last_bookmarks: Bookmarks | None
    def __init__(self, db: AsyncDatabase, access_mode: str | None = None, parallel_runtime: bool | None = False) -> None: ...
    async def __aenter__(self) -> AsyncTransactionProxy: ...
    async def __aexit__(self, exc_type: Any, exc_value: Any, traceback: Any) -> None: ...
    def __call__(self, func: Callable) -> Callable: ...
    @property
    def with_bookmark(self) -> BookmarkingAsyncTransactionProxy: ...

class BookmarkingAsyncTransactionProxy(AsyncTransactionProxy):
    bookmarks: Incomplete
    last_bookmarks: Incomplete
    def __call__(self, func: Callable) -> Callable: ...

class ImpersonationHandler:
    db: Incomplete
    impersonated_user: Incomplete
    def __init__(self, db: AsyncDatabase, impersonated_user: str) -> None: ...
    def __enter__(self) -> ImpersonationHandler: ...
    def __exit__(self, exception_type: Any, exception_value: Any, exception_traceback: Any) -> None: ...
    def __call__(self, func: Callable) -> Callable: ...
