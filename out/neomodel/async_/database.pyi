from _typeshed import Incomplete
from neo4j import AsyncDriver as AsyncDriver, AsyncResult as AsyncResult, AsyncSession as AsyncSession, AsyncTransaction as AsyncTransaction
from neo4j.api import Bookmarks as Bookmarks
from neomodel.async_.node import AsyncStructuredNode as AsyncStructuredNode
from neomodel.async_.transaction import AsyncTransactionProxy as AsyncTransactionProxy, ImpersonationHandler as ImpersonationHandler
from neomodel.config import get_config as get_config
from neomodel.constants import ACCESS_MODE_READ as ACCESS_MODE_READ, ACCESS_MODE_WRITE as ACCESS_MODE_WRITE, CONSTRAINT_ALREADY_EXISTS as CONSTRAINT_ALREADY_EXISTS, DROP_CONSTRAINT_COMMAND as DROP_CONSTRAINT_COMMAND, DROP_INDEX_COMMAND as DROP_INDEX_COMMAND, ELEMENT_ID_METHOD as ELEMENT_ID_METHOD, ENTERPRISE_EDITION_TAG as ENTERPRISE_EDITION_TAG, INDEX_ALREADY_EXISTS as INDEX_ALREADY_EXISTS, LEGACY_ID_METHOD as LEGACY_ID_METHOD, LIST_CONSTRAINTS_COMMAND as LIST_CONSTRAINTS_COMMAND, LOOKUP_INDEX_TYPE as LOOKUP_INDEX_TYPE, NO_SESSION_OPEN as NO_SESSION_OPEN, NO_TRANSACTION_IN_PROGRESS as NO_TRANSACTION_IN_PROGRESS, RULE_ALREADY_EXISTS as RULE_ALREADY_EXISTS, UNKNOWN_SERVER_VERSION as UNKNOWN_SERVER_VERSION, VERSION_FULLTEXT_INDEXES_SUPPORT as VERSION_FULLTEXT_INDEXES_SUPPORT, VERSION_LEGACY_ID as VERSION_LEGACY_ID, VERSION_PARALLEL_RUNTIME_SUPPORT as VERSION_PARALLEL_RUNTIME_SUPPORT, VERSION_RELATIONSHIP_CONSTRAINTS_SUPPORT as VERSION_RELATIONSHIP_CONSTRAINTS_SUPPORT, VERSION_RELATIONSHIP_VECTOR_INDEXES_SUPPORT as VERSION_RELATIONSHIP_VECTOR_INDEXES_SUPPORT, VERSION_VECTOR_INDEXES_SUPPORT as VERSION_VECTOR_INDEXES_SUPPORT
from neomodel.exceptions import ConstraintValidationFailed as ConstraintValidationFailed, FeatureNotSupported as FeatureNotSupported, NodeClassNotDefined as NodeClassNotDefined, RelationshipClassNotDefined as RelationshipClassNotDefined, UniqueProperty as UniqueProperty
from neomodel.properties import FulltextIndex as FulltextIndex, Property as Property, VectorIndex as VectorIndex
from neomodel.util import version_tag_to_integer as version_tag_to_integer
from typing import Any, Callable, TextIO

logger: Incomplete

def ensure_connection(func: Callable) -> Callable: ...

class AsyncDatabase:
    def __new__(cls) -> AsyncDatabase: ...
    def __init__(self) -> None: ...
    @classmethod
    def get_instance(cls) -> AsyncDatabase: ...
    @classmethod
    async def reset_instance(cls) -> None: ...
    @property
    def url(self) -> str | None: ...
    @url.setter
    def url(self, value: str | None) -> None: ...
    @property
    def driver(self) -> AsyncDriver | None: ...
    @driver.setter
    def driver(self, value: AsyncDriver | None) -> None: ...
    @property
    def impersonated_user(self) -> str | None: ...
    @impersonated_user.setter
    def impersonated_user(self, value: str | None) -> None: ...
    async def set_connection(self, url: str | None = None, driver: AsyncDriver | None = None) -> None: ...
    async def close_connection(self) -> None: ...
    @property
    async def database_version(self) -> str | None: ...
    @property
    async def database_edition(self) -> str | None: ...
    @property
    def transaction(self) -> AsyncTransactionProxy: ...
    @property
    def write_transaction(self) -> AsyncTransactionProxy: ...
    @property
    def read_transaction(self) -> AsyncTransactionProxy: ...
    @property
    def parallel_read_transaction(self) -> AsyncTransactionProxy: ...
    async def impersonate(self, user: str) -> ImpersonationHandler: ...
    @ensure_connection
    async def begin(self, access_mode: str = ..., **parameters: Any) -> None: ...
    @ensure_connection
    async def commit(self) -> Bookmarks: ...
    @ensure_connection
    async def rollback(self) -> None: ...
    @ensure_connection
    async def cypher_query(self, query: str, params: dict[str, Any] | None = None, handle_unique: bool = True, retry_on_session_expire: bool = False, resolve_objects: bool = False) -> tuple[list | None, tuple[str, ...] | None]: ...
    async def get_id_method(self) -> str: ...
    async def parse_element_id(self, element_id: str | None) -> str | int: ...
    async def list_indexes(self, exclude_token_lookup: bool = False) -> list[dict]: ...
    async def list_constraints(self) -> list[dict]: ...
    @ensure_connection
    async def version_is_higher_than(self, version_tag: str) -> bool: ...
    @ensure_connection
    async def edition_is_enterprise(self) -> bool: ...
    @ensure_connection
    async def parallel_runtime_available(self) -> bool: ...
    async def change_neo4j_password(self, user: str, new_password: str) -> None: ...
    async def clear_neo4j_database(self, clear_constraints: bool = False, clear_indexes: bool = False) -> None: ...
    async def drop_constraints(self, quiet: bool = True, stdout: TextIO | None = None) -> None: ...
    async def drop_indexes(self, quiet: bool = True, stdout: TextIO | None = None) -> None: ...
    async def remove_all_labels(self, stdout: TextIO | None = None) -> None: ...
    async def install_all_labels(self, stdout: TextIO | None = None) -> None: ...
    async def install_labels(self, cls: Any, quiet: bool = True, stdout: TextIO | None = None) -> None: ...

adb: Incomplete
