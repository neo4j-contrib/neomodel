from neomodel import AsyncStructuredNode as AsyncStructuredNode, AsyncStructuredRel as AsyncStructuredRel
from neomodel.async_.relationship_manager import AsyncRelationshipManager as AsyncRelationshipManager, AsyncZeroOrMore as AsyncZeroOrMore
from neomodel.config import get_config as get_config
from neomodel.exceptions import AttemptedCardinalityViolation as AttemptedCardinalityViolation, CardinalityViolation as CardinalityViolation
from typing import Any

class AsyncZeroOrOne(AsyncRelationshipManager):
    description: str
    async def check_cardinality(self, node: AsyncStructuredNode) -> None: ...
    async def single(self) -> AsyncStructuredNode | None: ...
    async def all(self) -> list['AsyncStructuredNode']: ...
    async def connect(self, node: AsyncStructuredNode, properties: dict[str, Any] | None = None) -> AsyncStructuredRel: ...

class AsyncOneOrMore(AsyncRelationshipManager):
    description: str
    async def single(self) -> AsyncStructuredNode: ...
    async def all(self) -> list['AsyncStructuredNode']: ...
    async def disconnect(self, node: AsyncStructuredNode) -> None: ...
    async def disconnect_all(self) -> None: ...

class AsyncOne(AsyncRelationshipManager):
    description: str
    async def check_cardinality(self, node: AsyncStructuredNode) -> None: ...
    async def single(self) -> AsyncStructuredNode: ...
    async def all(self) -> list['AsyncStructuredNode']: ...
    async def disconnect(self, node: AsyncStructuredNode) -> None: ...
    async def disconnect_all(self) -> None: ...
    async def connect(self, node: AsyncStructuredNode, properties: dict[str, Any] | None = None) -> AsyncStructuredRel: ...
