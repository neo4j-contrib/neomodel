from collections.abc import Iterator
from neo4j.graph import Path as Path
from neomodel.async_.database import adb as adb
from neomodel.async_.node import AsyncStructuredNode as AsyncStructuredNode
from neomodel.async_.relationship import AsyncStructuredRel as AsyncStructuredRel

class AsyncNeomodelPath:
    def __init__(self, a_neopath: Path) -> None: ...
    def __len__(self) -> int: ...
    def __iter__(self) -> Iterator[AsyncStructuredRel]: ...
    @property
    def nodes(self) -> list[AsyncStructuredNode]: ...
    @property
    def start_node(self) -> AsyncStructuredNode: ...
    @property
    def end_node(self) -> AsyncStructuredNode: ...
    @property
    def relationships(self) -> list[AsyncStructuredRel]: ...
