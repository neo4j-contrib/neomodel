from _typeshed import Incomplete
from neomodel.properties import Property as Property, validator as validator
from shapely.coords import CoordinateSequence as CoordinateSequence
from shapely.geometry import Point as ShapelyPoint

ACCEPTABLE_CRS: Incomplete
SRID_TO_CRS: Incomplete

class NeomodelPoint(ShapelyPoint):
    def __init__(self, *args, **kwargs) -> None: ...
    @property
    def crs(self): ...
    @property
    def x(self): ...
    @property
    def y(self): ...
    @property
    def z(self): ...
    @property
    def latitude(self): ...
    @property
    def longitude(self): ...
    @property
    def height(self): ...
    def __copy__(self): ...
    def __deepcopy__(self, memo): ...

class NeomodelPoint:
    def __init__(self, *args, **kwargs) -> None: ...
    @property
    def crs(self): ...
    @property
    def x(self): ...
    @property
    def y(self): ...
    @property
    def z(self): ...
    @property
    def latitude(self): ...
    @property
    def longitude(self): ...
    @property
    def height(self): ...
    def __copy__(self): ...
    def __deepcopy__(self, memo): ...
    def __getattr__(self, attr): ...
    def __eq__(self, other): ...

class PointProperty(Property):
    form_field_class: str
    def __init__(self, *args, **kwargs) -> None: ...
    @validator
    def inflate(self, value): ...
    @validator
    def deflate(self, value): ...
