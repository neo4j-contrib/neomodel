import abc
import neo4j.time
from _typeshed import Incomplete
from abc import ABCMeta, abstractmethod
from datetime import date, datetime
from neomodel.config import get_config as get_config
from neomodel.exceptions import DeflateError as DeflateError, InflateError as InflateError, NeomodelException as NeomodelException
from typing import Any, Callable, overload

TOO_MANY_DEFAULTS: str

def validator(fn: Callable) -> Callable: ...

class FulltextIndex:
    analyzer: Incomplete
    eventually_consistent: Incomplete
    def __init__(self, analyzer: str | None = 'standard-no-stop-words', eventually_consistent: bool | None = False) -> None: ...

class VectorIndex:
    dimensions: Incomplete
    similarity_function: Incomplete
    def __init__(self, dimensions: int | None = 1536, similarity_function: str | None = 'cosine') -> None: ...

class Property(metaclass=ABCMeta):
    form_field_class: str
    name: str | None
    owner: Any | None
    unique_index: bool
    index: bool
    fulltext_index: FulltextIndex | None
    vector_index: VectorIndex | None
    required: bool
    default: Any
    db_property: str | None
    label: str | None
    help_text: str | None
    has_default: Incomplete
    def __init__(self, name: str | None = None, owner: Any | None = None, unique_index: bool = False, index: bool = False, fulltext_index: FulltextIndex | None = None, vector_index: VectorIndex | None = None, required: bool = False, default: Any | None = None, db_property: str | None = None, label: str | None = None, help_text: str | None = None, **kwargs: dict[str, Any]) -> None: ...
    def default_value(self) -> Any: ...
    def get_db_property_name(self, attribute_name: str) -> str: ...
    @property
    def is_indexed(self) -> bool: ...
    @abstractmethod
    def inflate(self, value: Any, rethrow: bool = False) -> Any: ...
    @abstractmethod
    def deflate(self, value: Any, rethrow: bool = False) -> Any: ...

class NormalizedProperty(Property):
    @validator
    def inflate(self, value: Any) -> Any: ...
    @validator
    def deflate(self, value: Any) -> Any: ...
    def default_value(self) -> Any: ...
    def normalize(self, value: Any) -> Any: ...

class RegexProperty(NormalizedProperty):
    form_field_class: str
    expression: str
    def __init__(self, expression: str | None = None, **kwargs: Any) -> None: ...
    def normalize(self, value: Any) -> str: ...

class EmailProperty(RegexProperty):
    form_field_class: str
    expression: str

class StringProperty(NormalizedProperty):
    max_length: Incomplete
    choices: Incomplete
    form_field_class: str
    def __init__(self, choices: Any | None = None, max_length: int | None = None, **kwargs: Any) -> None: ...
    def normalize(self, value: str) -> str: ...
    def default_value(self) -> str: ...

class IntegerProperty(Property):
    form_field_class: str
    @validator
    def inflate(self, value: Any) -> int: ...
    @validator
    def deflate(self, value: Any) -> int: ...
    def default_value(self) -> int: ...

class ArrayProperty(Property):
    base_property: Incomplete
    def __init__(self, base_property: Property | None = None, **kwargs: Any) -> None: ...
    @validator
    def inflate(self, value: Any) -> list: ...
    @validator
    def deflate(self, value: Any) -> list: ...
    def default_value(self) -> list: ...

class FloatProperty(Property):
    form_field_class: str
    @validator
    def inflate(self, value: Any) -> float: ...
    @validator
    def deflate(self, value: Any) -> float: ...
    def default_value(self) -> float: ...

class BooleanProperty(Property):
    form_field_class: str
    @validator
    def inflate(self, value: Any) -> bool: ...
    @validator
    def deflate(self, value: Any) -> bool: ...
    def default_value(self) -> bool: ...

class DateProperty(Property):
    form_field_class: str
    @validator
    def inflate(self, value: Any) -> date: ...
    @validator
    def deflate(self, value: date) -> str: ...

class DateTimeFormatProperty(Property):
    form_field_class: str
    format: Incomplete
    def __init__(self, default_now: bool = False, format: str = '%Y-%m-%d', **kwargs: Any) -> None: ...
    @validator
    def inflate(self, value: Any) -> datetime: ...
    @validator
    def deflate(self, value: datetime) -> str: ...

class DateTimeProperty(Property):
    form_field_class: str
    def __init__(self, default_now: bool = False, **kwargs: Any) -> None: ...
    @validator
    def inflate(self, value: Any) -> datetime: ...
    @validator
    def deflate(self, value: datetime) -> float: ...

class DateTimeNeo4jFormatProperty(Property):
    form_field_class: str
    format: Incomplete
    def __init__(self, default_now: bool = False, **kwargs: Any) -> None: ...
    @validator
    def inflate(self, value: Any) -> datetime: ...
    @validator
    def deflate(self, value: datetime) -> neo4j.time.DateTime: ...

class JSONProperty(Property):
    ensure_ascii: Incomplete
    def __init__(self, ensure_ascii: bool = True, *args: Any, **kwargs: Any) -> None: ...
    @validator
    def inflate(self, value: Any) -> Any: ...
    @validator
    def deflate(self, value: Any) -> str: ...

class AliasProperty(property, Property, metaclass=abc.ABCMeta):
    target: Incomplete
    required: bool
    has_default: bool
    def __init__(self, to: str) -> None: ...
    def aliased_to(self) -> str: ...
    @overload
    def __get__(self, obj: None, _type: Any | None = None) -> AliasProperty: ...
    @overload
    def __get__(self, obj: Any, _type: Any | None = None) -> Property: ...
    def __set__(self, obj: Any, value: Property) -> None: ...
    @property
    def index(self) -> bool: ...
    @index.setter
    def index(self, value: bool) -> None: ...
    @property
    def unique_index(self) -> bool: ...
    @unique_index.setter
    def unique_index(self, value: bool) -> None: ...

class UniqueIdProperty(Property):
    def __init__(self, **kwargs: Any) -> None: ...
    @validator
    def inflate(self, value: Any) -> str: ...
    @validator
    def deflate(self, value: Any) -> str: ...
